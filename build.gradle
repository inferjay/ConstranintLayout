buildscript {
    repositories {
        maven { url "$project.rootDir/../../prebuilts/tools/common/offline-m2" }
    }
    dependencies {
        classpath 'com.android.tools.build:gradle:2.0.0'

        // NOTE: Do not place your application dependencies here; they belong
        // in the individual module build.gradle files
    }
}


task('checkJavaVersion') << {
    def jvmVersion = System.getProperty('java.version')
    def requiredVersion = System.getenv('JAVA_FOR_TESTS') ?: '1.8'
    if (!jvmVersion.startsWith(requiredVersion)) {
        throw new RuntimeException("Tools need to be compiled with Java $requiredVersion, you are using Java $jvmVersion.")
    }
}
final def checkJavaVersionTask = tasks['checkJavaVersion']

/*
 * With the build server you are given two env variables.
 * The OUT_DIR is a temporary directory you can use to put things during the build.
 * The DIST_DIR is where you want to save things from the build.
 *
 * The build server will copy the contents of DIST_DIR to somewhere and make it available.
 */
if (System.env.DIST_DIR != null && System.env.OUT_DIR != null) {
    ext.androidHostOut = file(System.env.OUT_DIR)
    ext.androidHostDist = file(System.env.DIST_DIR)
} else {
    // ext.androidHostOut is shared by all tools/{base,build,swt} gradle projects/
    ext.androidHostOut = file("$rootDir/../../out")
    ext.androidHostDist = new File(ext.androidHostOut, "dist")
}

// rootProject.buildDir is specific to this gradle build.
buildDir = new File(ext.androidHostOut, "build/root")

ext.localRepo = project.hasProperty('localRepo') ? localRepo : "$ext.androidHostOut/repo"

subprojects { Project project ->
    repositories {
        maven { url "$rootProject.projectDir/../../prebuilts/tools/common/m2/repository" }
    }

    // Change buildDir first so that all plugins pick up the new value.
    project.buildDir = project.file("$project.parent.buildDir/../$project.name/build")
}

// basic task for custom distribution of project should the build server.
task dist << {
}
